//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 34 files.
  struct file {
    /// Resource file `Baby.png`.
    static let babyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Baby", pathExtension: "png")
    /// Resource file `Edit_Pencil.png`.
    static let edit_PencilPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Edit_Pencil", pathExtension: "png")
    /// Resource file `Ellipse2_Fill@1x.png`.
    static let ellipse2_Fill1xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Ellipse2_Fill@1x", pathExtension: "png")
    /// Resource file `Heart.png`.
    static let heartPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Heart", pathExtension: "png")
    /// Resource file `HeartBreaker.png`.
    static let heartBreakerPng = Rswift.FileResource(bundle: R.hostingBundle, name: "HeartBreaker", pathExtension: "png")
    /// Resource file `Logo.png`.
    static let logoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Logo", pathExtension: "png")
    /// Resource file `Poppins-Black.ttf`.
    static let poppinsBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Black", pathExtension: "ttf")
    /// Resource file `Poppins-BlackItalic.ttf`.
    static let poppinsBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BlackItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-BoldItalic.ttf`.
    static let poppinsBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBold.ttf`.
    static let poppinsExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBold", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBoldItalic.ttf`.
    static let poppinsExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLight.ttf`.
    static let poppinsExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLight", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLightItalic.ttf`.
    static let poppinsExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Italic.ttf`.
    static let poppinsItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Italic", pathExtension: "ttf")
    /// Resource file `Poppins-Light.ttf`.
    static let poppinsLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Light", pathExtension: "ttf")
    /// Resource file `Poppins-LightItalic.ttf`.
    static let poppinsLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-LightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-MediumItalic.ttf`.
    static let poppinsMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-MediumItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBold.ttf`.
    static let poppinsSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBoldItalic.ttf`.
    static let poppinsSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Thin.ttf`.
    static let poppinsThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Thin", pathExtension: "ttf")
    /// Resource file `Poppins-ThinItalic.ttf`.
    static let poppinsThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ThinItalic", pathExtension: "ttf")
    /// Resource file `Profile.png`.
    static let profilePng = Rswift.FileResource(bundle: R.hostingBundle, name: "Profile", pathExtension: "png")
    /// Resource file `User1.png`.
    static let user1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "User1", pathExtension: "png")
    /// Resource file `User2.png`.
    static let user2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "User2", pathExtension: "png")
    /// Resource file `User3.png`.
    static let user3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "User3", pathExtension: "png")
    /// Resource file `check.png`.
    static let checkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "check", pathExtension: "png")
    /// Resource file `facebook.png`.
    static let facebookPng = Rswift.FileResource(bundle: R.hostingBundle, name: "facebook", pathExtension: "png")
    /// Resource file `google.png`.
    static let googlePng = Rswift.FileResource(bundle: R.hostingBundle, name: "google", pathExtension: "png")
    /// Resource file `instagram.png`.
    static let instagramPng = Rswift.FileResource(bundle: R.hostingBundle, name: "instagram", pathExtension: "png")
    /// Resource file `snapchat.png`.
    static let snapchatPng = Rswift.FileResource(bundle: R.hostingBundle, name: "snapchat", pathExtension: "png")
    /// Resource file `wrong.png`.
    static let wrongPng = Rswift.FileResource(bundle: R.hostingBundle, name: "wrong", pathExtension: "png")

    /// `bundle.url(forResource: "Baby", withExtension: "png")`
    static func babyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.babyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Edit_Pencil", withExtension: "png")`
    static func edit_PencilPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.edit_PencilPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Ellipse2_Fill@1x", withExtension: "png")`
    static func ellipse2_Fill1xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ellipse2_Fill1xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Heart", withExtension: "png")`
    static func heartPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heartPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HeartBreaker", withExtension: "png")`
    static func heartBreakerPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heartBreakerPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Logo", withExtension: "png")`
    static func logoPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.logoPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Black", withExtension: "ttf")`
    static func poppinsBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BlackItalic", withExtension: "ttf")`
    static func poppinsBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BoldItalic", withExtension: "ttf")`
    static func poppinsBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBold", withExtension: "ttf")`
    static func poppinsExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBoldItalic", withExtension: "ttf")`
    static func poppinsExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLight", withExtension: "ttf")`
    static func poppinsExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLightItalic", withExtension: "ttf")`
    static func poppinsExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Italic", withExtension: "ttf")`
    static func poppinsItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Light", withExtension: "ttf")`
    static func poppinsLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-LightItalic", withExtension: "ttf")`
    static func poppinsLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-MediumItalic", withExtension: "ttf")`
    static func poppinsMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "ttf")`
    static func poppinsSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBoldItalic", withExtension: "ttf")`
    static func poppinsSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Thin", withExtension: "ttf")`
    static func poppinsThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ThinItalic", withExtension: "ttf")`
    static func poppinsThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Profile", withExtension: "png")`
    static func profilePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.profilePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "User1", withExtension: "png")`
    static func user1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.user1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "User2", withExtension: "png")`
    static func user2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.user2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "User3", withExtension: "png")`
    static func user3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.user3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "check", withExtension: "png")`
    static func checkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.checkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "facebook", withExtension: "png")`
    static func facebookPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.facebookPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "google", withExtension: "png")`
    static func googlePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googlePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "instagram", withExtension: "png")`
    static func instagramPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.instagramPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "snapchat", withExtension: "png")`
    static func snapchatPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snapchatPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wrong", withExtension: "png")`
    static func wrongPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wrongPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-BlackItalic`.
    static let poppinsBlackItalic = Rswift.FontResource(fontName: "Poppins-BlackItalic")
    /// Font `Poppins-Black`.
    static let poppinsBlack = Rswift.FontResource(fontName: "Poppins-Black")
    /// Font `Poppins-BoldItalic`.
    static let poppinsBoldItalic = Rswift.FontResource(fontName: "Poppins-BoldItalic")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBoldItalic`.
    static let poppinsExtraBoldItalic = Rswift.FontResource(fontName: "Poppins-ExtraBoldItalic")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-ExtraLightItalic`.
    static let poppinsExtraLightItalic = Rswift.FontResource(fontName: "Poppins-ExtraLightItalic")
    /// Font `Poppins-ExtraLight`.
    static let poppinsExtraLight = Rswift.FontResource(fontName: "Poppins-ExtraLight")
    /// Font `Poppins-Italic`.
    static let poppinsItalic = Rswift.FontResource(fontName: "Poppins-Italic")
    /// Font `Poppins-LightItalic`.
    static let poppinsLightItalic = Rswift.FontResource(fontName: "Poppins-LightItalic")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-MediumItalic`.
    static let poppinsMediumItalic = Rswift.FontResource(fontName: "Poppins-MediumItalic")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBoldItalic`.
    static let poppinsSemiBoldItalic = Rswift.FontResource(fontName: "Poppins-SemiBoldItalic")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    /// Font `Poppins-ThinItalic`.
    static let poppinsThinItalic = Rswift.FontResource(fontName: "Poppins-ThinItalic")
    /// Font `Poppins-Thin`.
    static let poppinsThin = Rswift.FontResource(fontName: "Poppins-Thin")

    /// `UIFont(name: "Poppins-Black", size: ...)`
    static func poppinsBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlack, size: size)
    }

    /// `UIFont(name: "Poppins-BlackItalic", size: ...)`
    static func poppinsBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlackItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-BoldItalic", size: ...)`
    static func poppinsBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBoldItalic", size: ...)`
    static func poppinsExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLight", size: ...)`
    static func poppinsExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLight, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLightItalic", size: ...)`
    static func poppinsExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Italic", size: ...)`
    static func poppinsItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }

    /// `UIFont(name: "Poppins-LightItalic", size: ...)`
    static func poppinsLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-MediumItalic", size: ...)`
    static func poppinsMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMediumItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBoldItalic", size: ...)`
    static func poppinsSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Thin", size: ...)`
    static func poppinsThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThin, size: size)
    }

    /// `UIFont(name: "Poppins-ThinItalic", size: ...)`
    static func poppinsThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.poppinsBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Black' could not be loaded, is 'Poppins-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BlackItalic' could not be loaded, is 'Poppins-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BoldItalic' could not be loaded, is 'Poppins-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBoldItalic' could not be loaded, is 'Poppins-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLight' could not be loaded, is 'Poppins-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLightItalic' could not be loaded, is 'Poppins-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Italic' could not be loaded, is 'Poppins-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-LightItalic' could not be loaded, is 'Poppins-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-MediumItalic' could not be loaded, is 'Poppins-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBoldItalic' could not be loaded, is 'Poppins-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Thin' could not be loaded, is 'Poppins-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ThinItalic' could not be loaded, is 'Poppins-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 70 images.
  struct image {
    /// Image `AnswerToSee`.
    static let answerToSee = Rswift.ImageResource(bundle: R.hostingBundle, name: "AnswerToSee")
    /// Image `Answer_Fill`.
    static let answer_Fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Answer_Fill")
    /// Image `Answer_White`.
    static let answer_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Answer_White")
    /// Image `Apple logo`.
    static let appleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Apple logo")
    /// Image `Baby`.
    static let baby = Rswift.ImageResource(bundle: R.hostingBundle, name: "Baby")
    /// Image `BackArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow")
    /// Image `CheckMark_Dark`.
    static let checkMark_Dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckMark_Dark")
    /// Image `CheckMark_Light`.
    static let checkMark_Light = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckMark_Light")
    /// Image `Check_green`.
    static let check_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check_green")
    /// Image `Check_white`.
    static let check_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check_white")
    /// Image `Circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circle")
    /// Image `CommanAnswer`.
    static let commanAnswer = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommanAnswer")
    /// Image `Comment_White`.
    static let comment_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comment_White")
    /// Image `Comments_Fill`.
    static let comments_Fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comments_Fill")
    /// Image `Comments`.
    static let comments = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comments")
    /// Image `ConfirmBtnImg`.
    static let confirmBtnImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ConfirmBtnImg")
    /// Image `Edit_Pencil`.
    static let edit_Pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit_Pencil")
    /// Image `Ellipse 19`.
    static let ellipse19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 19")
    /// Image `Ellipse2_Fill@1x`.
    static let ellipse2_Fill1x = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse2_Fill@1x")
    /// Image `Ellipse`.
    static let ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse")
    /// Image `HeartBreaker`.
    static let heartBreaker = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeartBreaker")
    /// Image `Like_Fill`.
    static let like_Fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Like_Fill")
    /// Image `Like_White`.
    static let like_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Like_White")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `NoImageTap2`.
    static let noImageTap2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoImageTap2")
    /// Image `NoImageTap`.
    static let noImageTap = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoImageTap")
    /// Image `NoImage`.
    static let noImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoImage")
    /// Image `Pindrop`.
    static let pindrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pindrop")
    /// Image `Profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile")
    /// Image `PurpleRing`.
    static let purpleRing = Rswift.ImageResource(bundle: R.hostingBundle, name: "PurpleRing")
    /// Image `Rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle")
    /// Image `RoundWithCheck`.
    static let roundWithCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RoundWithCheck")
    /// Image `Round_fill_check`.
    static let round_fill_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "Round_fill_check")
    /// Image `SliderImg`.
    static let sliderImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "SliderImg")
    /// Image `SliderTrack`.
    static let sliderTrack = Rswift.ImageResource(bundle: R.hostingBundle, name: "SliderTrack")
    /// Image `User1`.
    static let user1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "User1")
    /// Image `User2`.
    static let user2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "User2")
    /// Image `User3`.
    static let user3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "User3")
    /// Image `answerIcon`.
    static let answerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "answerIcon")
    /// Image `check_round_green`.
    static let check_round_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_round_green")
    /// Image `commetIcon`.
    static let commetIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "commetIcon")
    /// Image `commet`.
    static let commet = Rswift.ImageResource(bundle: R.hostingBundle, name: "commet")
    /// Image `dice2`.
    static let dice2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dice2")
    /// Image `dice`.
    static let dice = Rswift.ImageResource(bundle: R.hostingBundle, name: "dice")
    /// Image `dropdown`.
    static let dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropdown")
    /// Image `facebook  logo`.
    static let facebookLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook  logo")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `firewall`.
    static let firewall = Rswift.ImageResource(bundle: R.hostingBundle, name: "firewall")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `googlelogo`.
    static let googlelogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "googlelogo")
    /// Image `heartIcon`.
    static let heartIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartIcon")
    /// Image `home-fill`.
    static let homeFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-fill")
    /// Image `home-outline`.
    static let homeOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-outline")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `instagramlogo`.
    static let instagramlogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagramlogo")
    /// Image `leftCompareImg`.
    static let leftCompareImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftCompareImg")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `message-outline`.
    static let messageOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "message-outline")
    /// Image `notification-outline`.
    static let notificationOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification-outline")
    /// Image `onboard1`.
    static let onboard1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard1")
    /// Image `onboard2`.
    static let onboard2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard2")
    /// Image `onboard3`.
    static let onboard3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboard3")
    /// Image `profileIcon`.
    static let profileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileIcon")
    /// Image `profileImgGirl`.
    static let profileImgGirl = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileImgGirl")
    /// Image `profileUserImg`.
    static let profileUserImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileUserImg")
    /// Image `rightCompareImg`.
    static let rightCompareImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightCompareImg")
    /// Image `round_purplering`.
    static let round_purplering = Rswift.ImageResource(bundle: R.hostingBundle, name: "round_purplering")
    /// Image `snapchat`.
    static let snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "snapchat")
    /// Image `snapchatlogo`.
    static let snapchatlogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "snapchatlogo")
    /// Image `wordAnsImg`.
    static let wordAnsImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "wordAnsImg")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AnswerToSee", bundle: ..., traitCollection: ...)`
    static func answerToSee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answerToSee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Answer_Fill", bundle: ..., traitCollection: ...)`
    static func answer_Fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answer_Fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Answer_White", bundle: ..., traitCollection: ...)`
    static func answer_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answer_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Apple logo", bundle: ..., traitCollection: ...)`
    static func appleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Baby", bundle: ..., traitCollection: ...)`
    static func baby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baby, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CheckMark_Dark", bundle: ..., traitCollection: ...)`
    static func checkMark_Dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMark_Dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CheckMark_Light", bundle: ..., traitCollection: ...)`
    static func checkMark_Light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMark_Light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check_green", bundle: ..., traitCollection: ...)`
    static func check_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check_white", bundle: ..., traitCollection: ...)`
    static func check_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommanAnswer", bundle: ..., traitCollection: ...)`
    static func commanAnswer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commanAnswer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Comment_White", bundle: ..., traitCollection: ...)`
    static func comment_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Comments", bundle: ..., traitCollection: ...)`
    static func comments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comments, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Comments_Fill", bundle: ..., traitCollection: ...)`
    static func comments_Fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comments_Fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ConfirmBtnImg", bundle: ..., traitCollection: ...)`
    static func confirmBtnImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirmBtnImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Edit_Pencil", bundle: ..., traitCollection: ...)`
    static func edit_Pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_Pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 19", bundle: ..., traitCollection: ...)`
    static func ellipse19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse", bundle: ..., traitCollection: ...)`
    static func ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse2_Fill@1x", bundle: ..., traitCollection: ...)`
    static func ellipse2_Fill1x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse2_Fill1x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeartBreaker", bundle: ..., traitCollection: ...)`
    static func heartBreaker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartBreaker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Like_Fill", bundle: ..., traitCollection: ...)`
    static func like_Fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_Fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Like_White", bundle: ..., traitCollection: ...)`
    static func like_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NoImage", bundle: ..., traitCollection: ...)`
    static func noImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NoImageTap", bundle: ..., traitCollection: ...)`
    static func noImageTap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImageTap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NoImageTap2", bundle: ..., traitCollection: ...)`
    static func noImageTap2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImageTap2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pindrop", bundle: ..., traitCollection: ...)`
    static func pindrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pindrop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PurpleRing", bundle: ..., traitCollection: ...)`
    static func purpleRing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purpleRing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RoundWithCheck", bundle: ..., traitCollection: ...)`
    static func roundWithCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundWithCheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Round_fill_check", bundle: ..., traitCollection: ...)`
    static func round_fill_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_fill_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SliderImg", bundle: ..., traitCollection: ...)`
    static func sliderImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SliderTrack", bundle: ..., traitCollection: ...)`
    static func sliderTrack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderTrack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "User1", bundle: ..., traitCollection: ...)`
    static func user1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "User2", bundle: ..., traitCollection: ...)`
    static func user2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "User3", bundle: ..., traitCollection: ...)`
    static func user3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "answerIcon", bundle: ..., traitCollection: ...)`
    static func answerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answerIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_round_green", bundle: ..., traitCollection: ...)`
    static func check_round_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_round_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "commet", bundle: ..., traitCollection: ...)`
    static func commet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "commetIcon", bundle: ..., traitCollection: ...)`
    static func commetIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commetIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dice", bundle: ..., traitCollection: ...)`
    static func dice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dice2", bundle: ..., traitCollection: ...)`
    static func dice2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dice2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropdown", bundle: ..., traitCollection: ...)`
    static func dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook  logo", bundle: ..., traitCollection: ...)`
    static func facebookLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "firewall", bundle: ..., traitCollection: ...)`
    static func firewall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firewall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googlelogo", bundle: ..., traitCollection: ...)`
    static func googlelogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googlelogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartIcon", bundle: ..., traitCollection: ...)`
    static func heartIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-fill", bundle: ..., traitCollection: ...)`
    static func homeFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-outline", bundle: ..., traitCollection: ...)`
    static func homeOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagramlogo", bundle: ..., traitCollection: ...)`
    static func instagramlogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagramlogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leftCompareImg", bundle: ..., traitCollection: ...)`
    static func leftCompareImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftCompareImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message-outline", bundle: ..., traitCollection: ...)`
    static func messageOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification-outline", bundle: ..., traitCollection: ...)`
    static func notificationOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboard1", bundle: ..., traitCollection: ...)`
    static func onboard1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboard2", bundle: ..., traitCollection: ...)`
    static func onboard2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboard3", bundle: ..., traitCollection: ...)`
    static func onboard3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboard3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileIcon", bundle: ..., traitCollection: ...)`
    static func profileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileImgGirl", bundle: ..., traitCollection: ...)`
    static func profileImgGirl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileImgGirl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileUserImg", bundle: ..., traitCollection: ...)`
    static func profileUserImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileUserImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightCompareImg", bundle: ..., traitCollection: ...)`
    static func rightCompareImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightCompareImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "round_purplering", bundle: ..., traitCollection: ...)`
    static func round_purplering(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_purplering, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snapchat", bundle: ..., traitCollection: ...)`
    static func snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snapchat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snapchatlogo", bundle: ..., traitCollection: ...)`
    static func snapchatlogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snapchatlogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wordAnsImg", bundle: ..., traitCollection: ...)`
    static func wordAnsImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wordAnsImg, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `ActivityTableCell`.
    static let activityTableCell = _R.nib._ActivityTableCell()
    /// Nib `AnswerTableCell1`.
    static let answerTableCell1 = _R.nib._AnswerTableCell1()
    /// Nib `AnswerTableCell2`.
    static let answerTableCell2 = _R.nib._AnswerTableCell2()
    /// Nib `AnswerTableCell3`.
    static let answerTableCell3 = _R.nib._AnswerTableCell3()
    /// Nib `QuestionCollectionCell1`.
    static let questionCollectionCell1 = _R.nib._QuestionCollectionCell1()
    /// Nib `QuestionCollectionCell2`.
    static let questionCollectionCell2 = _R.nib._QuestionCollectionCell2()
    /// Nib `QuestionTableCell1`.
    static let questionTableCell1 = _R.nib._QuestionTableCell1()
    /// Nib `QuestionTableCell2`.
    static let questionTableCell2 = _R.nib._QuestionTableCell2()
    /// Nib `QuestionTableCell3`.
    static let questionTableCell3 = _R.nib._QuestionTableCell3()
    /// Nib `QuestionTableCell4`.
    static let questionTableCell4 = _R.nib._QuestionTableCell4()
    /// Nib `QuestionTableCell5`.
    static let questionTableCell5 = _R.nib._QuestionTableCell5()
    /// Nib `RequestTableCell`.
    static let requestTableCell = _R.nib._RequestTableCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivityTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activityTableCell) instead")
    static func activityTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnswerTableCell1", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.answerTableCell1) instead")
    static func answerTableCell1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerTableCell1)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnswerTableCell2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.answerTableCell2) instead")
    static func answerTableCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerTableCell2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnswerTableCell3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.answerTableCell3) instead")
    static func answerTableCell3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerTableCell3)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionCollectionCell1", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionCollectionCell1) instead")
    static func questionCollectionCell1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionCollectionCell1)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionCollectionCell2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionCollectionCell2) instead")
    static func questionCollectionCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionCollectionCell2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionTableCell1", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableCell1) instead")
    static func questionTableCell1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableCell1)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionTableCell2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableCell2) instead")
    static func questionTableCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableCell2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionTableCell3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableCell3) instead")
    static func questionTableCell3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableCell3)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionTableCell4", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableCell4) instead")
    static func questionTableCell4(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableCell4)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionTableCell5", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableCell5) instead")
    static func questionTableCell5(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableCell5)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RequestTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestTableCell) instead")
    static func requestTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestTableCell)
    }
    #endif

    static func activityTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityTableCell? {
      return R.nib.activityTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityTableCell
    }

    static func answerTableCell1(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableCell1? {
      return R.nib.answerTableCell1.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableCell1
    }

    static func answerTableCell2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableCell2? {
      return R.nib.answerTableCell2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableCell2
    }

    static func answerTableCell3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableCell3? {
      return R.nib.answerTableCell3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableCell3
    }

    static func questionCollectionCell1(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCollectionCell1? {
      return R.nib.questionCollectionCell1.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCollectionCell1
    }

    static func questionCollectionCell2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCollectionCell2? {
      return R.nib.questionCollectionCell2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCollectionCell2
    }

    static func questionTableCell1(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell1? {
      return R.nib.questionTableCell1.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell1
    }

    static func questionTableCell2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell2? {
      return R.nib.questionTableCell2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell2
    }

    static func questionTableCell3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell3? {
      return R.nib.questionTableCell3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell3
    }

    static func questionTableCell4(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell4? {
      return R.nib.questionTableCell4.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell4
    }

    static func questionTableCell5(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell5? {
      return R.nib.questionTableCell5.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell5
    }

    static func requestTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestTableCell? {
      return R.nib.requestTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestTableCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 11 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ActivityTableCell`.
    static let activityTableCell: Rswift.ReuseIdentifier<ActivityTableCell> = Rswift.ReuseIdentifier(identifier: "ActivityTableCell")
    /// Reuse identifier `AnswerTableCell1`.
    static let answerTableCell1: Rswift.ReuseIdentifier<AnswerTableCell1> = Rswift.ReuseIdentifier(identifier: "AnswerTableCell1")
    /// Reuse identifier `AnswerTableCell2`.
    static let answerTableCell2: Rswift.ReuseIdentifier<AnswerTableCell2> = Rswift.ReuseIdentifier(identifier: "AnswerTableCell2")
    /// Reuse identifier `AnswerTableCell3`.
    static let answerTableCell3: Rswift.ReuseIdentifier<AnswerTableCell3> = Rswift.ReuseIdentifier(identifier: "AnswerTableCell3")
    /// Reuse identifier `CollectionCell2`.
    static let collectionCell2: Rswift.ReuseIdentifier<CollectionCell2> = Rswift.ReuseIdentifier(identifier: "CollectionCell2")
    /// Reuse identifier `CollectionCell`.
    static let collectionCell: Rswift.ReuseIdentifier<CollectionCell> = Rswift.ReuseIdentifier(identifier: "CollectionCell")
    /// Reuse identifier `QuestionCollectionCell1`.
    static let questionCollectionCell1: Rswift.ReuseIdentifier<QuestionCollectionCell1> = Rswift.ReuseIdentifier(identifier: "QuestionCollectionCell1")
    /// Reuse identifier `QuestionCollectionCell2`.
    static let questionCollectionCell2: Rswift.ReuseIdentifier<QuestionCollectionCell2> = Rswift.ReuseIdentifier(identifier: "QuestionCollectionCell2")
    /// Reuse identifier `QuestionTableCell1`.
    static let questionTableCell1: Rswift.ReuseIdentifier<QuestionTableCell1> = Rswift.ReuseIdentifier(identifier: "QuestionTableCell1")
    /// Reuse identifier `QuestionTableCell4`.
    static let questionTableCell4: Rswift.ReuseIdentifier<QuestionTableCell4> = Rswift.ReuseIdentifier(identifier: "QuestionTableCell4")
    /// Reuse identifier `QuestionTableCell5`.
    static let questionTableCell5: Rswift.ReuseIdentifier<QuestionTableCell5> = Rswift.ReuseIdentifier(identifier: "QuestionTableCell5")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ActivityTableCell.validate()
      try _AnswerTableCell1.validate()
      try _AnswerTableCell2.validate()
      try _AnswerTableCell3.validate()
      try _QuestionCollectionCell1.validate()
      try _QuestionTableCell1.validate()
      try _QuestionTableCell2.validate()
      try _QuestionTableCell3.validate()
      try _QuestionTableCell4.validate()
      try _QuestionTableCell5.validate()
      try _RequestTableCell.validate()
    }

    struct _ActivityTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActivityTableCell

      let bundle = R.hostingBundle
      let identifier = "ActivityTableCell"
      let name = "ActivityTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "User2.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User2.png' is used in nib 'ActivityTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User3.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User3.png' is used in nib 'ActivityTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AnswerTableCell1: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AnswerTableCell1

      let bundle = R.hostingBundle
      let identifier = "AnswerTableCell1"
      let name = "AnswerTableCell1"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableCell1? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableCell1
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Baby.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Baby.png' is used in nib 'AnswerTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Like_Fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Like_Fill' is used in nib 'AnswerTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User1.png' is used in nib 'AnswerTableCell1', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AnswerTableCell2: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AnswerTableCell2

      let bundle = R.hostingBundle
      let identifier = "AnswerTableCell2"
      let name = "AnswerTableCell2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableCell2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableCell2
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Like_Fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Like_Fill' is used in nib 'AnswerTableCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SliderTrack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SliderTrack' is used in nib 'AnswerTableCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User1.png' is used in nib 'AnswerTableCell2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AnswerTableCell3: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AnswerTableCell3

      let bundle = R.hostingBundle
      let identifier = "AnswerTableCell3"
      let name = "AnswerTableCell3"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerTableCell3? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerTableCell3
      }

      static func validate() throws {
        if UIKit.UIImage(named: "10", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '10' is used in nib 'AnswerTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Like_Fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Like_Fill' is used in nib 'AnswerTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User1.png' is used in nib 'AnswerTableCell3', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionCollectionCell1: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuestionCollectionCell1

      let bundle = R.hostingBundle
      let identifier = "QuestionCollectionCell1"
      let name = "QuestionCollectionCell1"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCollectionCell1? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCollectionCell1
      }

      static func validate() throws {
        if UIKit.UIImage(named: "11", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '11' is used in nib 'QuestionCollectionCell1', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionCollectionCell2: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QuestionCollectionCell2

      let bundle = R.hostingBundle
      let identifier = "QuestionCollectionCell2"
      let name = "QuestionCollectionCell2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCollectionCell2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCollectionCell2
      }

      fileprivate init() {}
    }

    struct _QuestionTableCell1: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuestionTableCell1

      let bundle = R.hostingBundle
      let identifier = "QuestionTableCell1"
      let name = "QuestionTableCell1"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell1? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell1
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Answer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Answer' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Baby.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Baby.png' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comments' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Heart.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart.png' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HeartBreaker.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeartBreaker.png' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile.png' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'QuestionTableCell1', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionTableCell2: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuestionTableCell2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell2
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Answer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Answer' is used in nib 'QuestionTableCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comments' is used in nib 'QuestionTableCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile.png' is used in nib 'QuestionTableCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'QuestionTableCell2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionTableCell3: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuestionTableCell3"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell3? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell3
      }

      static func validate() throws {
        if UIKit.UIImage(named: "10", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '10' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "9", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '9' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Answer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Answer' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comments' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile.png' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RoundWithCheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RoundWithCheck' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'QuestionTableCell3', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionTableCell4: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuestionTableCell4

      let bundle = R.hostingBundle
      let identifier = "QuestionTableCell4"
      let name = "QuestionTableCell4"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell4? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell4
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Answer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Answer' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommanAnswer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommanAnswer' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comments' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Pindrop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pindrop' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile.png' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PurpleRing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PurpleRing' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SliderTrack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SliderTrack' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'QuestionTableCell4', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _QuestionTableCell5: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QuestionTableCell5

      let bundle = R.hostingBundle
      let identifier = "QuestionTableCell5"
      let name = "QuestionTableCell5"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableCell5? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableCell5
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Answer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Answer' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Baby.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Baby.png' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comments' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Heart.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart.png' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HeartBreaker.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeartBreaker.png' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile.png' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wrong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wrong' is used in nib 'QuestionTableCell5', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RequestTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RequestTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "User2.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User2.png' is used in nib 'RequestTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check.png' is used in nib 'RequestTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wrong.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wrong.png' is used in nib 'RequestTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "12 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '12 1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let answer1ViewController = StoryboardViewControllerResource<Answer1ViewController>(identifier: "Answer1ViewController")
      let answer2ViewController = StoryboardViewControllerResource<Answer2ViewController>(identifier: "Answer2ViewController")
      let answer3ViewController = StoryboardViewControllerResource<Answer3ViewController>(identifier: "Answer3ViewController")
      let bundle = R.hostingBundle
      let customTabBarController = StoryboardViewControllerResource<CustomTabBarController>(identifier: "CustomTabBarController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let messageViewController = StoryboardViewControllerResource<MessageViewController>(identifier: "MessageViewController")
      let name = "Main"
      let notificationViewController = StoryboardViewControllerResource<NotificationViewController>(identifier: "NotificationViewController")
      let profileQuestionAnswerViewController = StoryboardViewControllerResource<ProfileQuestionAnswerViewController>(identifier: "ProfileQuestionAnswerViewController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let questionType1ViewController = StoryboardViewControllerResource<QuestionType1ViewController>(identifier: "QuestionType1ViewController")
      let questionType2ViewController = StoryboardViewControllerResource<QuestionType2ViewController>(identifier: "QuestionType2ViewController")
      let questionViewController = StoryboardViewControllerResource<QuestionViewController>(identifier: "QuestionViewController")
      let tabBarController = StoryboardViewControllerResource<TabBarController>(identifier: "TabBarController")
      let zoomImageViewController = StoryboardViewControllerResource<ZoomImageViewController>(identifier: "ZoomImageViewController")

      func answer1ViewController(_: Void = ()) -> Answer1ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: answer1ViewController)
      }

      func answer2ViewController(_: Void = ()) -> Answer2ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: answer2ViewController)
      }

      func answer3ViewController(_: Void = ()) -> Answer3ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: answer3ViewController)
      }

      func customTabBarController(_: Void = ()) -> CustomTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customTabBarController)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func messageViewController(_: Void = ()) -> MessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messageViewController)
      }

      func notificationViewController(_: Void = ()) -> NotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationViewController)
      }

      func profileQuestionAnswerViewController(_: Void = ()) -> ProfileQuestionAnswerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileQuestionAnswerViewController)
      }

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      func questionType1ViewController(_: Void = ()) -> QuestionType1ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionType1ViewController)
      }

      func questionType2ViewController(_: Void = ()) -> QuestionType2ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionType2ViewController)
      }

      func questionViewController(_: Void = ()) -> QuestionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionViewController)
      }

      func tabBarController(_: Void = ()) -> TabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarController)
      }

      func zoomImageViewController(_: Void = ()) -> ZoomImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: zoomImageViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "11", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '11' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "13", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '13' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Answer_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Answer_White' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Baby.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Baby.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BackArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackArrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Check_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Check_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comment_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comment_White' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Edit_Pencil.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Edit_Pencil.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse2_Fill.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse2_Fill.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Heart.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HeartBreaker.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeartBreaker.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Like_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Like_White' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Logo.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NoImageTap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NoImageTap' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NoImageTap2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NoImageTap2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SliderTrack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SliderTrack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow.left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow.left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell.fill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dice' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dice2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dice2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "house", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'house' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "house.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'house.fill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "instagram.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'instagram.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.circle.fill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "round_purplering", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'round_purplering' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "snapchat.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'snapchat.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().answer1ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'answer1ViewController' could not be loaded from storyboard 'Main' as 'Answer1ViewController'.") }
        if _R.storyboard.main().answer2ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'answer2ViewController' could not be loaded from storyboard 'Main' as 'Answer2ViewController'.") }
        if _R.storyboard.main().answer3ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'answer3ViewController' could not be loaded from storyboard 'Main' as 'Answer3ViewController'.") }
        if _R.storyboard.main().customTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customTabBarController' could not be loaded from storyboard 'Main' as 'CustomTabBarController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().messageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messageViewController' could not be loaded from storyboard 'Main' as 'MessageViewController'.") }
        if _R.storyboard.main().notificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationViewController' could not be loaded from storyboard 'Main' as 'NotificationViewController'.") }
        if _R.storyboard.main().profileQuestionAnswerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileQuestionAnswerViewController' could not be loaded from storyboard 'Main' as 'ProfileQuestionAnswerViewController'.") }
        if _R.storyboard.main().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Main' as 'ProfileViewController'.") }
        if _R.storyboard.main().questionType1ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionType1ViewController' could not be loaded from storyboard 'Main' as 'QuestionType1ViewController'.") }
        if _R.storyboard.main().questionType2ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionType2ViewController' could not be loaded from storyboard 'Main' as 'QuestionType2ViewController'.") }
        if _R.storyboard.main().questionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionViewController' could not be loaded from storyboard 'Main' as 'QuestionViewController'.") }
        if _R.storyboard.main().tabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarController' could not be loaded from storyboard 'Main' as 'TabBarController'.") }
        if _R.storyboard.main().zoomImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'zoomImageViewController' could not be loaded from storyboard 'Main' as 'ZoomImageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
